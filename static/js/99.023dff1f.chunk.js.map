{"version":3,"file":"static/js/99.023dff1f.chunk.js","mappings":"sRAEaA,EAAaC,EAAAA,GAAAA,EAAH,+IAQVC,EAAOD,EAAAA,GAAAA,EAAH,sGAMJE,EAAWF,EAAAA,GAAAA,EAAH,wGAMRG,EAAUH,EAAAA,GAAAA,EAAH,wG,SCuBpB,EAxCgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEHC,EAAAA,EAAAA,IAAgBP,GAFb,OAEhBQ,EAFgB,OAGtBJ,EAAWI,EAAKC,SAHM,gDAKtBC,QAAQC,IAAI,gCAAZ,MALsB,yDAAH,qDASvBL,GACD,GAAE,CAACN,IAECG,GAKH,8BACsB,IAAnBA,EAAQS,QACP,SAACf,EAAD,UAAM,+BAEN,yBACGM,EAAQU,KAAI,SAAAC,GAAM,OACjB,4BACE,SAACnB,EAAD,UAAamB,EAAOC,UACpB,SAAClB,EAAD,UAAOiB,EAAOE,WACd,SAAClB,EAAD,UAAWgB,EAAOG,WAAWC,UAAU,EAAG,QAHlCJ,EAAOK,GADA,SATlB,SAACpB,EAAD,UAAS,cAoBnB,C,kMCxCDqB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,WAAMC,GAAN,kGAENH,EAAAA,EAAAA,IAAU,sBAAuB,CACtDI,OAAQ,CACNC,QAASJ,KAJgB,cAEvBK,EAFuB,OAQvBC,EAAiBD,EAASlB,KAAKC,QARR,kBAStBkB,GATsB,sCAW7BjB,QAAQC,IAAI,kCAAmC,KAAMiB,SAXxB,8DAAH,sDAgBjBC,EAAe,mCAAG,WAAM7B,GAAN,kGAEJoB,EAAAA,EAAAA,IAAA,iBAAoBpB,GAAW,CACpDwB,OAAQ,CACNC,QAASJ,EACTS,mBAAoB,oBALG,cAErBJ,EAFqB,OASrBK,EAAeL,EAASlB,KATH,kBAUpBuB,GAVoB,sCAY3BrB,QAAQC,IAAI,gCAAiC,KAAMiB,SAZxB,8DAAH,sDAiBfI,EAAY,mCAAG,WAAMC,GAAN,kGAEDb,EAAAA,EAAAA,IAAU,gBAAiB,CAChDI,OAAQ,CACNC,QAASJ,EACTY,MAAOA,KALa,cAElBP,EAFkB,OASlBQ,EAAgBR,EAASlB,KAAKC,QATZ,kBAUjByB,GAViB,sCAYxBxB,QAAQC,IAAI,0BAA2B,KAAMiB,SAZrB,8DAAH,sDAiBZO,EAAY,mCAAG,WAAMnC,GAAN,kGAEDoB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,YAAuC,CAC5DwB,OAAQ,CACNC,QAASJ,KAJW,cAElBK,EAFkB,OAQlBU,EAAYV,EAASlB,KARH,kBASjB4B,GATiB,sCAWxB1B,QAAQC,IAAI,6BAA8B,KAAMiB,SAXxB,8DAAH,sDAgBZrB,EAAe,mCAAG,WAAMP,GAAN,kGAEJoB,EAAAA,EAAAA,IAAA,iBAAoBpB,EAApB,YAAuC,CAC5DwB,OAAQ,CACNC,QAASJ,KAJc,cAErBK,EAFqB,OAQrBW,EAAeX,EAASlB,KARH,kBASpB6B,GAToB,sCAW3B3B,QAAQC,IAAI,gCAAiC,KAAMiB,SAXxB,8DAAH,qD","sources":["Pages/Reviews/Reviews.styled.js","Pages/Reviews/Reviews.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const BoldAuthor = styled.p`\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600;\n  font-size: 20px;\n  color: white;\n  margin-top: 20px;\n`;\n\nexport const Text = styled.p`\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 400;\n  color: white;\n`;\n\nexport const BoldText = styled.p`\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 600;\n  color: #f44336;\n`;\n\nexport const Loading = styled.p`\n  font-weight: 600;\n  font-family: 'Rajdhani', sans-serif;\n  color: #f44336;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/moviesAPI';\nimport { BoldAuthor, BoldText, Loading, Text } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews(data.results);\n      } catch (error) {\n        console.log('Error fetching movie reviews:', error);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  if (!reviews) {\n    return <Loading>Loading...</Loading>;\n  }\n\n  return (\n    <>\n      {reviews.length === 0 ? (\n        <Text>We don't have any reviews</Text>\n      ) : (\n        <div>\n          {reviews.map(result => (\n            <div key={result.id}>\n              <BoldAuthor>{result.author}</BoldAuthor>\n              <Text>{result.content}</Text>\n              <BoldText>{result.created_at.substring(0, 10)}</BoldText>\n            </div>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","// https://api.themoviedb.org/3/movie/11?api_key=f73865c93b2adf185bfa72e66b6a561c\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f73865c93b2adf185bfa72e66b6a561c';\n\nexport const getTrendingMovies = async timeWindow => {\n  try {\n    const response = await axios.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const trendingMovies = response.data.results;\n    return trendingMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n        append_to_response: 'credits,videos',\n      },\n    });\n\n    const movieDetails = response.data;\n    return movieDetails;\n  } catch (error) {\n    console.log('Error fetching movie details:', error.message);\n    throw error;\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    });\n\n    const searchResults = response.data.results;\n    return searchResults;\n  } catch (error) {\n    console.log('Error searching movies:', error.message);\n    throw error;\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const movieCast = response.data;\n    return movieCast;\n  } catch (error) {\n    console.log('Error fetching movie cast:', error.message);\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const movieReviews = response.data;\n    return movieReviews;\n  } catch (error) {\n    console.log('Error fetching movie reviews:', error.message);\n    throw error;\n  }\n};\n"],"names":["BoldAuthor","styled","Text","BoldText","Loading","movieId","useParams","useState","reviews","setReviews","useEffect","fetchMovieReviews","getMovieReviews","data","results","console","log","length","map","result","author","content","created_at","substring","id","axios","API_KEY","getTrendingMovies","timeWindow","params","api_key","response","trendingMovies","message","getMovieDetails","append_to_response","movieDetails","searchMovies","query","searchResults","getMovieCast","movieCast","movieReviews"],"sourceRoot":""}