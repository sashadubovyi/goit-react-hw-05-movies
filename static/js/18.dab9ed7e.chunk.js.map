{"version":3,"file":"static/js/18.dab9ed7e.chunk.js","mappings":"0RAEaA,EAAOC,EAAAA,GAAAA,GAAH,4EAMJC,EAAYD,EAAAA,GAAAA,GAAH,yCAITE,EAAWF,EAAAA,GAAAA,IAAH,qEAKRG,EAAaH,EAAAA,GAAAA,IAAH,yCAIVI,EAAmBJ,EAAAA,GAAAA,IAAH,0CAIhBK,EAAOL,EAAAA,GAAAA,EAAH,0HAOJM,EAAUN,EAAAA,GAAAA,EAAH,wG,SC4BpB,EA/Ca,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEAC,EAAAA,EAAAA,IAAaP,GAFb,OAEbQ,EAFa,OAGnBJ,EAASI,EAAKC,MAHK,gDAKnBC,QAAQC,IAAI,6BAAZ,MALmB,yDAAH,qDASpBL,GACD,GAAE,CAACN,IAECG,GAKH,+BACE,SAACX,EAAD,UACGW,EAAMS,KAAI,SAAAC,GAAK,OACd,SAACnB,EAAD,WACE,UAACC,EAAD,WACGkB,EAAMC,cACL,SAAClB,EAAD,CACEmB,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,QAGb,SAACpB,EAAD,CACEkB,IAAI,kCACJC,IAAI,MAGR,SAAClB,EAAD,UAAOe,EAAMI,WAbDJ,EAAMK,GADR,SANb,SAACnB,EAAD,UAAS,cA2BnB,C,kMCvDDoB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,WAAMC,GAAN,kGAENH,EAAAA,EAAAA,IAAU,sBAAuB,CACtDI,OAAQ,CACNC,QAASJ,KAJgB,cAEvBK,EAFuB,OAQvBC,EAAiBD,EAASjB,KAAKmB,QARR,kBAStBD,GATsB,sCAW7BhB,QAAQC,IAAI,kCAAmC,KAAMiB,SAXxB,8DAAH,sDAgBjBC,EAAe,mCAAG,WAAM7B,GAAN,kGAEJmB,EAAAA,EAAAA,IAAA,iBAAoBnB,GAAW,CACpDuB,OAAQ,CACNC,QAASJ,EACTU,mBAAoB,oBALG,cAErBL,EAFqB,OASrBM,EAAeN,EAASjB,KATH,kBAUpBuB,GAVoB,sCAY3BrB,QAAQC,IAAI,gCAAiC,KAAMiB,SAZxB,8DAAH,sDAiBfI,EAAY,mCAAG,WAAMC,GAAN,kGAEDd,EAAAA,EAAAA,IAAU,gBAAiB,CAChDI,OAAQ,CACNC,QAASJ,EACTa,MAAOA,KALa,cAElBR,EAFkB,OASlBS,EAAgBT,EAASjB,KAAKmB,QATZ,kBAUjBO,GAViB,sCAYxBxB,QAAQC,IAAI,0BAA2B,KAAMiB,SAZrB,8DAAH,sDAiBZrB,EAAY,mCAAG,WAAMP,GAAN,kGAEDmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNC,QAASJ,KAJW,cAElBK,EAFkB,OAQlBU,EAAYV,EAASjB,KARH,kBASjB2B,GATiB,sCAWxBzB,QAAQC,IAAI,6BAA8B,KAAMiB,SAXxB,8DAAH,sDAgBZQ,EAAe,mCAAG,WAAMpC,GAAN,kGAEJmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNC,QAASJ,KAJc,cAErBK,EAFqB,OAQrBY,EAAeZ,EAASjB,KARH,kBASpB6B,GAToB,sCAW3B3B,QAAQC,IAAI,gCAAiC,KAAMiB,SAXxB,8DAAH,qD","sources":["Pages/Сast/Cast.styled.js","Pages/Сast/Cast.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n`;\n\nexport const ActorList = styled.li`\n  width: 100px;\n`;\n\nexport const ActorBox = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ActorImage = styled.img`\n  width: 100px;\n`;\n\nexport const PlaceholderImage = styled.img`\n  height: 150px;\n`;\n\nexport const Name = styled.p`\n  font-size: 20px;\n  font-family: 'Rajdhani', sans-serif;\n  font-weight: 400;\n  color: white;\n`;\n\nexport const Loading = styled.p`\n  font-weight: 600;\n  font-family: 'Rajdhani', sans-serif;\n  color: #f44336;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/moviesAPI';\nimport {\n  ActorBox,\n  ActorImage,\n  ActorList,\n  List,\n  Loading,\n  Name,\n  PlaceholderImage,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        const data = await getMovieCast(movieId);\n        setCasts(data.cast);\n      } catch (error) {\n        console.log('Error fetching movie cast:', error);\n      }\n    };\n\n    fetchMovieCast();\n  }, [movieId]);\n\n  if (!casts) {\n    return <Loading>Loading...</Loading>;\n  }\n\n  return (\n    <>\n      <List>\n        {casts.map(actor => (\n          <ActorList key={actor.id}>\n            <ActorBox>\n              {actor.profile_path ? (\n                <ActorImage\n                  src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              ) : (\n                <PlaceholderImage\n                  src=\"/src/image/placeholderImage.jpg\"\n                  alt=\"\"\n                />\n              )}\n              <Name>{actor.name}</Name>\n            </ActorBox>\n          </ActorList>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default Cast;\n","// https://api.themoviedb.org/3/movie/11?api_key=f73865c93b2adf185bfa72e66b6a561c\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f73865c93b2adf185bfa72e66b6a561c';\n\nexport const getTrendingMovies = async timeWindow => {\n  try {\n    const response = await axios.get('/trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const trendingMovies = response.data.results;\n    return trendingMovies;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error.message);\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n        append_to_response: 'credits,videos',\n      },\n    });\n\n    const movieDetails = response.data;\n    return movieDetails;\n  } catch (error) {\n    console.log('Error fetching movie details:', error.message);\n    throw error;\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const response = await axios.get('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: query,\n      },\n    });\n\n    const searchResults = response.data.results;\n    return searchResults;\n  } catch (error) {\n    console.log('Error searching movies:', error.message);\n    throw error;\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const movieCast = response.data;\n    return movieCast;\n  } catch (error) {\n    console.log('Error fetching movie cast:', error.message);\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    const movieReviews = response.data;\n    return movieReviews;\n  } catch (error) {\n    console.log('Error fetching movie reviews:', error.message);\n    throw error;\n  }\n};\n"],"names":["List","styled","ActorList","ActorBox","ActorImage","PlaceholderImage","Name","Loading","movieId","useParams","useState","casts","setCasts","useEffect","fetchMovieCast","getMovieCast","data","cast","console","log","map","actor","profile_path","src","alt","name","id","axios","API_KEY","getTrendingMovies","timeWindow","params","api_key","response","trendingMovies","results","message","getMovieDetails","append_to_response","movieDetails","searchMovies","query","searchResults","movieCast","getMovieReviews","movieReviews"],"sourceRoot":""}